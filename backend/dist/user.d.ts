import { Socket } from "socket.io";
import { User } from "./entity";
import { Historique } from "./entity";
import { UserService } from './user.service';
export declare class Vector {
    private w;
    private l;
    constructor(w: number, l: number);
    setW(value: number): void;
    getW(): number;
    setL(value: number): void;
    getL(): number;
}
export declare class historique {
    private login;
    private username;
    private score;
    private myPP;
    private oppenent;
    private oppenentImage;
    private hisPP;
    private gain;
    private result;
    constructor(login: string, username: string, myScore: number, hisScore: number, myPP: number, oppenent: string, hisPP: number, gain: number, result: string, opImage: string);
    toHistoriqueData(): Partial<Historique>;
    fetchHistorique(data: Partial<Historique>): void;
    getUsername(): string;
    getScore(): Vector;
    getMyPP(): number;
    getOppenent(): string;
    getOppenentImage(): string;
    getHisPP(): number;
    getGain(): number;
    getResult(): string;
}
export declare class dataUser {
    private padColor;
    private balleColor;
    private login;
    private id;
    private idH;
    private username;
    private guest;
    private deuxFap;
    private email;
    private image;
    private lvl;
    private progressBar;
    private winRatio;
    private PP;
    private gain;
    private gameCount;
    private historiqueArray;
    private blocked;
    private friends;
    constructor(login: string, pseudo: string, img: string, bool: boolean);
    toUser(): Partial<User>;
    fetchUser(data: Partial<User>): void;
    getGameCount(): number;
    setGameCount(): void;
    getPadColor(): string;
    setPadColor(value: string): void;
    getBalleColor(): string;
    setBalleColor(value: string): void;
    setLogin(value: string): void;
    getLogin(): string;
    setId(value: number): void;
    getId(): number;
    setIdh(value: number): void;
    getIdh(): number;
    setImage(value: string): void;
    getImage(): string;
    setPseudo(value: string): void;
    getPseudo(): string;
    setEmail(value: string): void;
    getEmail(): string;
    setDeuxFap(value: boolean): void;
    getDeuxFap(): boolean;
    setLvl(value: number): void;
    getLvl(): number;
    setProgressBar(value: number): void;
    getProgressBar(): number;
    setWinRatio(valueW: number, valueL: number): void;
    getWinRatio(): Vector;
    calcPPW(valueToi: number, valueLui: number): void;
    calcPPL(valueToi: number, valueLui: number): void;
    setPP(value: number): void;
    getPP(): number;
    setHistorique(myScore: number, hisScore: number, myPP: number, oppenent: string, hisPP: number, result: string, opImage: string): void;
    getHistorique(): historique[];
    getHistoriqueIndex(index: number): historique;
    getBlocked(): string[];
    block(username: string): void;
    unblock(username: string): void;
    getFriends(): string[];
    friend(username: string): void;
    unfriend(username: string): void;
}
export declare class opTmp {
    private username;
    private: string;
    private score;
    private image;
    private PP;
    constructor(username: string, score: number, image: string, PP: number);
    setValue(username: string, score: number, image: string, PP: number): void;
    getUsername(): string;
    getScore(): number;
    getImage(): string;
    getPP(): number;
}
export declare class user {
    socket: Socket;
    private login;
    private username;
    private guest;
    private img;
    private oppenent;
    private isInGame;
    private queue;
    private score;
    private value;
    private winHeight;
    private winWidht;
    private positionBarVer;
    private positionHorOfBalle;
    private positionVerOfBalle;
    private angOfBalle;
    private dirOfBalle;
    private player;
    private winCondition;
    private dataUser;
    private friendDataTmp;
    private opTmp;
    constructor(copyFrom?: user | {
        sock: Socket;
        login: string;
        username: string;
        img: string;
        guest: boolean;
    });
    getOpTmp(): opTmp;
    getFriendDataTmp(): dataUser;
    setDataUser(login: string, username: string, img: string, bool: boolean): void;
    getDataUser(): dataUser;
    setLogin(value: string): void;
    getLogin(): string;
    setUsername(value: string): void;
    getUsername(): string;
    getQueue(): boolean;
    setQueue(bool: boolean): void;
    getOppenent(): user;
    setOppenent(oppenent: user): void;
    getScore(): number;
    setScore(score: number): void;
    getWinHeight(): number;
    setWinHeight(value: number): void;
    getWinWidht(): number;
    setWinWidht(value: number): void;
    getPositionBarVer(): number;
    setPositionBarVer(value: number): void;
    getPositionHorOfBalle(): number;
    setPositionHorOfBalle(value: number): void;
    getPositionVerOfBalle(): number;
    setPositionVerOfBalle(value: number): void;
    getAngOfBalle(): number;
    setAngOfBalle(value: number): void;
    getDirOfBalle(): number;
    setDirOfBalle(value: number): void;
    getPlayer(): number;
    setPlayer(value: number): void;
    getWinCondition(): number;
    setWinCondition(value: number): void;
    getIsInGame(): boolean;
    setIsInGane(value: boolean): void;
    getValue(): number;
    setValue(value: number): void;
    setupValue(): void;
    balleCalc(): void;
}
export declare class ladderData {
    private username;
    private image;
    private PP;
    constructor(username: string, image: string, PP: number);
    setUsername(value: string): void;
    getUsername(): string;
    setImage(value: string): void;
    setPP(value: number): void;
    getPP(): number;
}
export declare class Leaderboard {
    private ladderData;
    constructor();
    setLadderData(userService: UserService, username: string, user: Partial<User>): Promise<void>;
    getLadderData(): ladderData[];
}
export declare class userPending {
    private username;
    private code;
    constructor(username: string, code: string);
}
